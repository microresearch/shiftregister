#!/usr/bin/python
'''Example of using pyKML to visualize ephemeris data

This example demonstrates how pyKML can be used visualize geospatial data 
generated by another Python library, PyEphem (http://rhodesmill.org/pyephem/).

Example usage:
python pyephem_example.py > test.kml
'''

from datetime import datetime, timedelta
from math import pi, degrees, radians
from operator import mod
import ephem

year = 2017
month = 3
day = 7
longitude = -1.826165 # [degrees] - keep to stonehenge just to check and see...
latitude = 51.178848  # [degrees]
elevation = 101.5     # elevation above sea level [meters]

# now try with one of our power stations

# KRB Unit B, Gundremmingen
longitude = 10.402379
latitude= 48.5148276

height = 2            # height of observer [meters] - whether we use height?
timezone_offset = 0   # time offset from UTC time [hours]
label_distance = 1000  # distance along ephemeris vector [meters]

obs = ephem.Observer()
obs.long, obs.lat = str(longitude), str(latitude) 
obs.elev = elevation + height
sun = ephem.Sun()

def adjust_heading_degrees(alpha):
    '''add the heading angle to make it between -180 and 180 degrees'''
    return mod(alpha+180,360)-180

def normalize_vector(x,y,z):
    '''return a unit normal vector'''
    length = (x**2+y**2+z**2)**0.5
    return x/length, y/length, z/length

def calculate_geographic_offset(azimuth_angle,altitude_angle, distance):
    '''determine the displacement in terms of latitude, longitude, and altitude'''
    from math import sin, cos, tan, atan2

    R = 6371009  # radius of earth in meters
    dx,dy,dz = normalize_vector(
        sin(azimuth_angle),
        cos(azimuth_angle),
        tan(altitude_angle),
    )
    alpha = atan2(dy,dx)   # horizontal angle [radians]
    D_horiz = distance*(dx**2+dy**2)**0.5  # horizontal length [meters]
    delta_lat_rad = D_horiz*sin(alpha)/R  # latitude offset [radians]
    delta_lon_rad = D_horiz*cos(alpha)/(R*cos(radians(latitude))) # longitude offset [radians]
    delta_alt = distance*dz  # altitude offset [meters]
    return delta_lat_rad, delta_lon_rad, delta_alt

# iterate through 24 hours, adding ephemeris data to a list
data = []
for hour in range(0,24):
    date = datetime(year,month,day)+timedelta(hours=hour)
    obs.date = '{year}/{month}/{day} {hour}:{minute}'.format(
        year = date.year,
        month = date.month,
        day = date.day,
        hour = date.hour,
        minute = date.minute,
    )
    sun.compute(obs)
    data.append({
        'datetime UTC': date,
        'azimuth_angle': sun.az.real,
        'altitude_angle': sun.alt.real,
    })

# or try and figure out when is sun-rise!

obs.date=datetime(year,month,day)
obs.horizon= '-0.34'

sunrise=obs.previous_rising(sun) # this is in UTC
obs.date=sunrise
sun.compute(obs)

delta_lat_rad, delta_lon_rad, delta_alt = calculate_geographic_offset(
            azimuth_angle=radians(adjust_heading_degrees(degrees(sun.az.real))),
            altitude_angle=sun.alt.real,
            distance=label_distance,
        )
lon = longitude + degrees(delta_lon_rad)
lat = latitude + degrees(delta_lat_rad)
alt = height + delta_alt
print str(ephem.localtime(sunrise))+"|LINESTRING("+str(longitude)+" "+str(latitude)+","+str(lon)+" "+str(lat)+")" # notes this is OUR localtime in GERMANY

#print str(sunrise)+"|LINESTRING("+str(longitude)+" "+str(latitude)+","+str(lon)+" "+str(lat)+")"

# iterate through the ephemeris data
for i in data:
    timestamp = i['datetime UTC']
    azimuth_rad = i['azimuth_angle']
    azimuth_deg = degrees(azimuth_rad)
    altitude_rad = i['altitude_angle']
    altitude_deg = degrees(altitude_rad)
    if altitude_deg > 0:
        # define a placemark along the ephemeris vector for labeling
        delta_lat_rad, delta_lon_rad, delta_alt = calculate_geographic_offset(
            azimuth_angle=radians(adjust_heading_degrees(degrees(azimuth_rad))),
            altitude_angle=altitude_rad,
            distance=label_distance,
        )
        lon = longitude + degrees(delta_lon_rad)
        lat = latitude + degrees(delta_lat_rad)
        alt = height + delta_alt
        #        print lon, lat
        #        print "\""+(timestamp+timedelta(timezone_offset)).strftime('%H:%M')+"\",",str(lat)+",",str(lon)

        # now try these as lines
        #print (timestamp+timedelta(timezone_offset)).strftime('%H:%M')+"|LINESTRING("+str(longitude)+" "+str(latitude)+","+str(lon)+" "+str(lat)+")"
        
        
        # print str((jdatas['locations'][0]['latitude']))+",",
        # print(jdatas['locations'][0]['longitude']),
        # print
        #        print (timestamp+timedelta(timezone_offset)).strftime('%H:%M')
    

        
